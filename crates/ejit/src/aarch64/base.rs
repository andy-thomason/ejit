//! This file has been generated by ejit-build DO NOT EDIT
//! Update asm/base.c instead
//! 
use crate::{Cond, Error, Executable, Ins, Type, Vsize, R, V};
use super::{gen2, gen3};

pub fn gen_base_aarch64(code: &mut Vec<u8>, i: &Ins) -> Result<(), Error> {
    use Type::*;
    use Vsize::*;
    use Ins::*;
    match i {
        Add(dest, src1, src2) => gen3(code, 0x8b010000, dest, src1, src2, &i), //    0:	8b010000 	add	x0, x0, x1
        Sub(dest, src1, src2) => gen3(code, 0xcb010000, dest, src1, src2, &i), //    8:	cb010000 	sub	x0, x0, x1
        And(dest, src1, src2) => gen3(code, 0x8a010000, dest, src1, src2, &i), //   10:	8a010000 	and	x0, x0, x1
        Or(dest, src1, src2) => gen3(code, 0xaa010000, dest, src1, src2, &i), //   18:	aa010000 	orr	x0, x0, x1
        Xor(dest, src1, src2) => gen3(code, 0xca010000, dest, src1, src2, &i), //   20:	ca010000 	eor	x0, x0, x1
        Shl(dest, src1, src2) => gen3(code, 0x9ac12000, dest, src1, src2, &i), //   28:	9ac12000 	lsl	x0, x0, x1
        Shr(dest, src1, src2) => gen3(code, 0x9ac12400, dest, src1, src2, &i), //   30:	9ac12400 	lsr	x0, x0, x1
        Sar(dest, src1, src2) => gen3(code, 0x9ac12800, dest, src1, src2, &i), //   38:	9ac12800 	asr	x0, x0, x1
        Mul(dest, src1, src2) => gen3(code, 0x9b017c00, dest, src1, src2, &i), //   40:	9b017c00 	mul	x0, x0, x1
        UDiv(dest, src1, src2) => gen3(code, 0x9ac10800, dest, src1, src2, &i), //   48:	9ac10800 	udiv	x0, x0, x1
        SDiv(dest, src1, src2) => gen3(code, 0x9ac10c00, dest, src1, src2, &i), //   50:	9ac10c00 	sdiv	x0, x0, x1
        Not(dest, src) => gen2(code, 0xaa2103e0, dest, src, &i), //   58:	aa2103e0 	mvn	x0, x1
        Neg(dest, src) => gen2(code, 0xcb0103e0, dest, src, &i), //   60:	cb0103e0 	neg	x0, x1
        _ => Err(Error::UnsupportedOperation(i.clone()))
    }
}
